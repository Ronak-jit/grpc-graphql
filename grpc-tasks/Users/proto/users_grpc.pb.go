// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: users.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsererviceClient is the client API for Userervice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsererviceClient interface {
	CreatUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type usererviceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsererviceClient(cc grpc.ClientConnInterface) UsererviceClient {
	return &usererviceClient{cc}
}

func (c *usererviceClient) CreatUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/users.Userervice/CreatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererviceClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/users.Userervice/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererviceClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/users.Userervice/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usererviceClient) DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/users.Userervice/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsererviceServer is the server API for Userervice service.
// All implementations must embed UnimplementedUsererviceServer
// for forward compatibility
type UsererviceServer interface {
	CreatUser(context.Context, *UserInfo) (*UserInfo, error)
	GetUser(context.Context, *Id) (*UserInfo, error)
	UpdateUser(context.Context, *UserInfo) (*Status, error)
	DeleteUser(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedUsererviceServer()
}

// UnimplementedUsererviceServer must be embedded to have forward compatible implementations.
type UnimplementedUsererviceServer struct {
}

func (UnimplementedUsererviceServer) CreatUser(context.Context, *UserInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatUser not implemented")
}
func (UnimplementedUsererviceServer) GetUser(context.Context, *Id) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsererviceServer) UpdateUser(context.Context, *UserInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsererviceServer) DeleteUser(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsererviceServer) mustEmbedUnimplementedUsererviceServer() {}

// UnsafeUsererviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsererviceServer will
// result in compilation errors.
type UnsafeUsererviceServer interface {
	mustEmbedUnimplementedUsererviceServer()
}

func RegisterUsererviceServer(s grpc.ServiceRegistrar, srv UsererviceServer) {
	s.RegisterService(&Userervice_ServiceDesc, srv)
}

func _Userervice_CreatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererviceServer).CreatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Userervice/CreatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererviceServer).CreatUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userervice_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererviceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Userervice/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererviceServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userervice_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererviceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Userervice/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererviceServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userervice_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsererviceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Userervice/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsererviceServer).DeleteUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Userervice_ServiceDesc is the grpc.ServiceDesc for Userervice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userervice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.Userervice",
	HandlerType: (*UsererviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatUser",
			Handler:    _Userervice_CreatUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Userervice_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Userervice_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Userervice_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
